#+TITLE: dot-emacs#+DESCRIPTION: kickass emacs config!#+AUTHOR: manishmarahatta(r68bux)#+OPTIONS: num:t#+STARTUP: overview*NOTE:* :warning: THIS CONFIG IS UNLIKELY TO HARM YOU/YOURSYSTEM :fire: Make Sure you backup your config before implementing this  :fire: :bangbang:* IntroNOTE: init.el has been converted to README.org#+BEGIN_EXAMPLEThis config was tested in Arch Linux and macOS Sierra(v 10.12.5)#+END_EXAMPLE[[http://manishmarahatta.com.np][[[file:https://user-images.githubusercontent.com/13973154/26870341-65e95114-4b8f-11e7-8ba4-e22e326b5617.png]]]]** Get it#+BEGIN_EXAMPLE$ git clone https://github.com/manishmarahatta/dot-emacs ~/.emacs.d/#+END_EXAMPLE** How to build=configure= :construction_worker: , pulls down the [[https://github.com/dimitri/el-get][el-get]], andstuffs.#+BEGIN_SRC bash  $ ./configure#+END_SRCRun and let the magic happen...** [[https://github.com/manishmarahatta/dot-emacs/blob/master/script.sh][Script]] to automatically build emacs config#+BEGIN_SRC bash  #!/bin/sh  echo "=========================================="  echo "Wait, while the emacs config builds itself"  echo "=========================================="  cd ~  DIRFIRST=~/.emacs.d  DIRSECOND=~/.emacs.d.backup  FILEFIRST=~/.emacs  if [ ! -f $DIRFIRST ]  then      mv ~/.emacs.d .emacs.d.backup;  fi  if [ ! -f $DIRSECOND ]  then      mv ~/.emacs.d.backup .emacs.d.backup.another;  fi  if [ ! -f $FILEFIRST ]  then      mv ~/.emacs .emacs.backup  fi  git clone https://github.com/manishmarahatta/dot-emacs.git ~/.emacs.d/  cd ~/.emacs.d  ./configure  cd ~#+END_SRCsave the above file as autoconfig.sh#+BEGIN_SRC bash  chmod +x autoconfig.sh#+END_SRCThen type#+BEGIN_SRC  ./autoconfig.sh#+END_SRC** Structure#+BEGIN_EXAMPLE   .├── auto-save-list├── config├── el-get│   ├── cl-lib│   ├── goto-chg│   ├── logo│   ├── methods│   ├── moz-repl│   ├── package│   ├── popup-kill-ring│   ├── pos-tip│   ├── python│   ├── recentf-ext│   ├── recipes│   └── test│       ├── issues│       └── pkgs├── elpa│   ├── archives│   │   ├── gnu│   │   ├── marmalade│   │   └── melpa│   ├── gnupg│   ├── twittering-mode-20160921.1038│   └── wget-1.94├── modules│   ├── auto-dim-other-buffers.el│   ├── emacs-ac-emoji│   │   ├── author│   │   └── image│   ├── emojis│   │   └── emojione-v2.2.6-22│   ├── mode-icons│   │   ├── icons│   │   └── scripts│   ├── powerline│   ├── powerline-iconic-theme│   ├── py-exec│   ├── tabbar-ruler│   │   ├── el-get│   │   └── melpa│   └── window-numbering├── plug-ins│   └── icons├── scripts├── snippets│   ├── fundamental-mode│   ├── html-mode│   ├── org-mode│   └── python-mode└── url51 directories#+END_EXAMPLE* emacs core** emacs garbage collector#+BEGIN_SRC emacs-lisp  (setq gc-cons-threshold 104857600)#+END_SRC** emacs serverStop opening *emacs* for each file. Set default open applicationusing =emacsclient -n -a=emacs [FILE]=.#+BEGIN_SRC emacs-lisp  (require 'server)  (unless (server-running-p)    (server-start))#+END_SRC** encoding#+BEGIN_SRC emacs-lisp  (setq locale-coding-system 'utf-8)  (set-language-environment 'utf-8)  (set-terminal-coding-system 'utf-8)  (set-keyboard-coding-system 'utf-8)  (set-selection-coding-system 'utf-8)  (prefer-coding-system 'utf-8)  (when (display-graphic-p)     (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))#+END_SRC** backup configuration#+BEGIN_SRC emacs-lisp  (setq backup-directory-alist (quote ((".*" . "~/.cache/emacs_backup/"))))  (setq make-backup-files nil)#+END_SRC** alias 'yes' and 'no#+BEGIN_SRC emacs-lisp  (fset 'yes-or-no-p 'y-or-n-p)#+END_SRC** recent files#+BEGIN_SRC emacs-lisp  ;; (recentf-mode nil)#+END_SRC* el-get[[https://github.com/dimitri/el-get][el-get]] is the package manager, which is similar to *apt-get*.#+BEGIN_SRC emacs-lisp  (add-to-list 'load-path "~/.emacs.d/el-get")  (require 'el-get)  (setq el-get-git-shallow-clone 't)  (el-get 'sync)#+END_SRC** my packagesTo replicate a package set for another emacs installation isexplain in el-get [[https://github.com/dimitri/el-get#replicating-a-package-set-on-another-emacs-installation][README]].you can list current installed package using.#+BEGIN_EXAMPLE`(setq my-packages    ',(mapcar #'el-get-as-symbol          (el-get-list-package-names-with-status "installed")))#+END_EXAMPLEthis is the same of current packages which are installed.PS: it's osx compatibile "chill"#+BEGIN_SRC emacs-lisp  (setq dim-packages         (append  ;; list of packages we use straight from official recipes            '(ample-regexps auto-complete cl-lib ctable dash            deferred ein epc epl exec-path-from-shell f flymake            flymake-cursor fuzzy git-modes goto-chg jedi json-mode            json-reformat json-snatcher magit go-eldoc go-autocomplete moz-repl multiple-cursors            pkg-info popup popup-kill-ring pos-tip pylookup python            python-environment recentf-ext request s undo-tree            web-mode websocket go-mode yasnippet ac-helm outorg outshine package)          (mapcar 'el-get-as-symbol (mapcar 'el-get-source-name          el-get-sources))))  (el-get 'sync dim-packages)#+END_SRC* [[https://github.com/manishmarahatta/dot-emacs/blob/master/config/ui.cfg.el][UI/UX]]Basic configuration, like window size keybindings#+BEGIN_SRC emacs-lisp  (load "~/.emacs.d/config/ui.cfg.el")#+END_SRCthese are kind of strange bindings for beginner and for me too, solets remove it#+BEGIN_SRC emacs-lisp  (global-unset-key [(control prior)])  (global-unset-key [(control next)])#+END_SRCI find these binding quite handful.#+BEGIN_SRC emacs-lisp  (el-get 'sync 'fill-column-indicator)  (require 'fill-column-indicator)  (global-set-key [M-f4] 'save-buffers-kill-terminal)  (global-set-key [(control f5)] '(lambda() (interactive)                                  (load-file "~/.emacs.d/init.el")))  (global-set-key [f6] '(lambda() (interactive)                        (toggle-truncate-lines)                        (fci-mode)))  (global-set-key [f9] 'speedbar)#+END_SRC** shift mouse selectionWe don't need *font dialog* options which is binded by default.Since, font resize has been binded to =C mouse scroll= does it.#+BEGIN_SRC emacs-lisp  (global-unset-key [(shift down-mouse-1)])  (global-set-key [(shift down-mouse-1)] 'mouse-save-then-kill)#+END_SRC** highlight current lineUses =shade-color= defined in [[https://github.com/manishmarahatta/dot-emacs/blob/master/config/ui.cfg.el][config/ui.cfg.el]] to compute newintensity of given color and alpha value.#+BEGIN_SRC emacs-lisp  (el-get 'sync 'highline)  (require 'highline)  (set-face-background 'highline-face (shade-color 09))  (add-hook 'prog-mode-hook 'highline-mode-on)  ;; not using inbuild hl-line-mode i can't seem to figure out changing  ;; face for shade-color  ;; (global-hl-line-mode 1)  ;; (set-face-background 'hl-line "#3e4446")  ;; (set-face-foreground 'highlight nil)  ;; (set-face-attribute hl-line-face nil :underline nil)#+END_SRC** custom undo action for GUI#+BEGIN_SRC emacs-lisp  (when window-system    (require 'undo-tree)    (global-undo-tree-mode 1)    (global-unset-key (kbd "C-/"))    (defalias 'redo 'undo-tree-redo)    (global-unset-key (kbd "C-z"))    (global-set-key (kbd "C-z") 'undo-only)    (global-set-key (kbd "C-S-z") 'redo))#+END_SRC** [[https://github.com/manishmarahatta/dot-emacs/blob/master/config/modeline.cfg.el][modeline]][[https://github.com/ryuslash/mode-icons][[[file:https://cloud.githubusercontent.com/assets/13973154/23092243/92afe916-f5ee-11e6-8406-1e21420f0a63.png]]]]#+BEGIN_SRC emacs-lisp  ;;; mode-icons directly from repo, for experiments  ;;; https://github.com/ryuslash/mode-icons  (load-file "~/.emacs.d/modules/mode-icons/mode-icons.el")  ;;; DID YOU GOT STUCK ABOVE? COMMENT LINE ABOVE & UNCOMMENT NEXT 2 LINES  ;; (el-get 'sync 'mode-icons)  ;; (require 'mode-icons)  ;; (setq mode-icons-desaturate-inactive nil)  ;; (setq mode-icons-desaturate-active nil)  ;; (setq mode-icons-grayscale-transform nil)  (mode-icons-mode)  (el-get 'sync 'powerline)  (require 'powerline)  ;;; https://github.com/manishmarahatta/powerline-iconic-theme  ;; (add-to-list 'load-path "~/.emacs.d/modules/powerline-iconic-theme/")  ;;(load-file "~/.emacs.d/modules/powerline-iconic-theme/iconic.el")  ;;(powerline-iconic-theme)  ;;; DID YOU GOT STUCK ABOVE? COMMENT 2 LINES ABOVE & UNCOMMENT NEXT LINE  (powerline-default-theme)  ;;; modeline from spacmacs  ;;; https://github.com/TheBB/spaceline  ;; (add-to-list 'load-path  "~/.emacs.d/modules/spaceline/")  ;; (require 'spaceline-config)  ;; (spaceline-spacemacs-theme)#+END_SRC** [[https://github.com/manishmarahatta/dot-emacs/blob/master/config/tabbar.cfg.el][tabbar]][[https://github.com/mattfidler/tabbar-ruler.el][[[file:https://cloud.githubusercontent.com/assets/13973154/23092256/d412bf28-f5ee-11e6-9002-212ab2b55ba2.png]]]]#+BEGIN_SRC emacs-lisp  (el-get 'sync 'tabbar)  (require 'tabbar)  (tabbar-mode t)  ;;; tabbar-ruler directly from repo, for experiments  ;;; https://github.com/mattfidler/tabbar-ruler.el  (load-file "~/.emacs.d/modules/tabbar-ruler/tabbar-ruler.el")  ;;; DID YOU GOT STUCK ABOVE? COMMENT LINE ABOVE & UNCOMMENT NEXT 2  ;; (el-get 'sync 'tabbar-ruler)  ;; (require 'tabbar-ruler)  (setq tabbar-ruler-style 'firefox)  (load "~/.emacs.d/config/tabbar.cfg.el")  (global-set-key [f7] 'tabbar-mode)#+END_SRCbind them as modern GUI system.#+BEGIN_SRC emacs-lisp  (define-key global-map [(control tab)] 'tabbar-forward)  (define-key global-map [(control next)] 'tabbar-forward)  (define-key global-map [(control prior)] 'tabbar-backward)  (define-key global-map (kbd "C-S-<iso-lefttab>") 'tabbar-backward)#+END_SRCBinding for the tab groups, some how I use lots of buffers.#+BEGIN_SRC emacs-lisp  (global-set-key [(control shift prior)] 'tabbar-backward-group)  (global-set-key [(control shift next)] 'tabbar-forward-group)#+END_SRC** smooth scrollUnfortunately emacs :barber: scrolling :barber: is not smooth, its*2017* already.#+BEGIN_SRC emacs-lisp  (el-get 'sync 'smooth-scroll)  (require 'smooth-scroll)  (smooth-scroll-mode t)  (setq linum-delay t)  (setq redisplay-dont-pause t)  (setq scroll-conservatively 0) ;; cursor on the middle of the screen  (setq scroll-up-aggressively 0.01)  (setq scroll-down-aggressively 0.01)  (setq auto-window-vscroll nil)  (setq mouse-wheel-progressive-speed 10)  (setq mouse-wheel-follow-mouse 't)#+END_SRC** delete selection modeDefault behavious of emacs weird, I wish this was *default*.#+BEGIN_SRC emacs-lisp  (delete-selection-mode 1)#+END_SRC** Interactively Do Thingsido-mode#+BEGIN_SRC emacs-lisp  (ido-mode t)  ;;(ido-ubiquitous t)  (setq ido-enable-prefix nil        ido-enable-flex-matching t ;; enable fuzzy matching        ido-auto-merge-work-directories-length nil        ido-create-new-buffer 'always        ido-use-filename-at-point 'guess        ;; ido-default-file-method 'select-window        ido-use-virtual-buffers t        ido-handle-duplicate-virtual-buffers 2        ido-max-prospects 10)#+END_SRC** M-x interface**** smex#+BEGIN_SRC emacs-lisp  ;; (el-get 'sync 'smex)  ;; (require 'smex)  ;; (smex-initialize)  ;; (global-set-key (kbd "M-x") 'smex)#+END_SRC**** helm[[https://github.com/emacs-helm/helm]]#+BEGIN_SRC emacs-lisp  (el-get 'sync 'helm)   (require 'helm)   (global-set-key (kbd "M-x") 'helm-M-x)   (global-set-key (kbd "C-x C-f") 'helm-find-files)   (helm-mode 1)#+END_SRC** anzuHighlight all search matches, most of the text editor does thiswhy not emacs. Here is the [[https://raw.githubusercontent.com/syohex/emacs-anzu/master/image/anzu.gif][gify]] from original repo.#+BEGIN_SRC emacs-lisp  (el-get 'sync 'anzu)  (require 'anzu)  (global-anzu-mode +1)  (global-unset-key (kbd "M-%"))  (global-unset-key (kbd "C-M-%"))  (global-set-key (kbd "M-%") 'anzu-query-replace)  (global-set-key (kbd "C-M-%") 'anzu-query-replace-regexp)#+END_SRC** [[https://github.com/magnars/multiple-cursors.el][multiple cursor]]if [[https://www.sublimetext.com/][sublime]] can have multiple selections, *emacs* can too..Here is [[https://youtu.be/jNa3axo40qM][video]] from [[http://emacsrocks.com/][Emacs Rocks!]] about it in [[http://emacsrocks.com/e13.html][ep13]].#+BEGIN_SRC emacs-lisp  (when window-system    (el-get 'sync 'multiple-cursors)    (require 'multiple-cursors)    (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click))#+END_SRC** goto-last-changeThis is the gem feature, this might be true answer to the /sublimemini-map/ which is over rated, this is what you need.If you aren't using el-get here is the [[https://raw.github.com/emacsmirror/emacswiki.org/master/goto-last-change.el][source]], guessing it itsavaliable in all major repository by now.#+BEGIN_SRC emacs-lisp  (el-get 'sync 'goto-chg)  (require 'goto-chg)  (global-unset-key (kbd "C-j"))  (global-set-key (kbd "C-j") 'goto-last-change)#+END_SRC** switch windowsIt kinda has been stuck in my config for years, just addicted toit. Seems like this is by default now.#+BEGIN_SRC emacs-lisp  ;; (el-get 'sync 'switch-window)  ;; (require 'switch-window)  ;; (global-set-key (kbd "C-x o") 'switch-window)#+END_SRC** [[https://github.com/iqbalansari/emacs-emojify][emoji]]People have emotions and so do *emacs* 😂.#+BEGIN_SRC emacs-lisp  (el-get 'sync 'emojify)  (require 'emojify)  (add-hook 'org-mode-hook 'emojify-mode)  (add-hook 'markdown-mode-hook 'emojify-mode)  (add-hook 'git-commit-mode-hook 'emojify-mode)#+END_SRC* programming#+BEGIN_SRC emacs-lisp  (setq-default comment-start "# ")#+END_SRC** internal packages#+BEGIN_SRC emacs-lisp  (add-hook 'prog-mode-hook 'which-function-mode)  (add-hook 'prog-mode-hook 'toggle-truncate-lines)#+END_SRC#+BEGIN_SRC emacs-lisp  (setq show-paren-style 'expression)  (show-paren-mode 1)#+END_SRC** watch word#+BEGIN_SRC emacs-lisp  (defun watch-words ()    (interactive)    (font-lock-add-keywords     nil '(("\\<\\(FIX ?-?\\(ME\\)?\\|TODO\\|BUGS?\\|TIPS?\\|TESTING\\|WARN\\(ING\\)?S?\\|WISH\\|IMP\\|NOTE\\)"            1 font-lock-warning-face t))))  (add-hook 'prog-mode-hook 'watch-words)#+END_SRC** highlight symbol#+BEGIN_SRC emacs-lisp  (el-get 'sync 'highlight-symbol)  (require 'highlight-symbol)  (global-set-key [(control f3)] 'highlight-symbol-at-point)  (global-set-key [(shift f3)] 'highlight-symbol-next)  (global-set-key [(shift f2)] 'highlight-symbol-prev)  (global-unset-key (kbd "<C-down-mouse-1>"))  (global-set-key (kbd "<C-down-mouse-1>")             (lambda (event)               (interactive "e")               (save-excursion                 (goto-char (posn-point (event-start event)))                 (highlight-symbol-at-point))))#+END_SRC** trailing white-spaces#+BEGIN_SRC emacs-lisp  (defun nuke_traling ()    (add-hook 'write-file-hooks 'delete-trailing-whitespace)    (add-hook 'before-save-hooks 'whitespace-cleanup))  (add-hook 'prog-mode-hook 'nuke_traling)#+END_SRC** indentation#+BEGIN_SRC emacs-lisp  (setq-default indent-tabs-mode nil)  (setq-default tab-width 4)#+END_SRC** [[https://github.com/manishmarahatta/dot-emacs/blob/master/config/compile.cfg.el][complie]]#+BEGIN_SRC emacs-lisp  (load "~/.emacs.d/config/compile.cfg.el")#+END_SRC*** few hooks#+BEGIN_SRC emacs-lisp  (el-get 'sync 'fill-column-indicator)  (require 'fill-column-indicator)  (defun my-compilation-mode-hook ()    (setq truncate-lines nil) ;; automatically becomes buffer local    (set (make-local-variable 'truncate-partial-width-windows) nil)    (toggle-truncate-lines)    (fci-mode))  (add-hook 'compilation-mode-hook 'my-compilation-mode-hook)#+END_SRC*** bindings#+BEGIN_SRC emacs-lisp  (global-set-key (kbd "C-<f8>") 'save-and-compile-again)  (global-set-key (kbd "C-<f9>") 'ask-new-compile-command)  (global-set-key (kbd "<f8>") 'toggle-compilation-buffer)#+END_SRC** rainbow delimiters#+BEGIN_SRC emacs-lisp  (el-get 'sync 'rainbow-delimiters)  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)#+END_SRC** ggtagscode navigation[[https://github.com/leoliu/ggtags]]install ggtags as mention in the repo#+BEGIN_SRC emacs-lisp  (add-hook 'c-mode-common-hook            (lambda ()              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)                (ggtags-mode 1))))  (add-hook 'python-mode-hook 'ggtags-mode)  (global-set-key (kbd "<C-double-mouse-1>") 'ggtags-find-tag-mouse)#+END_SRC* modes** golang#+BEGIN_SRC emacs-lisp  (add-hook 'before-save-hook #'gofmt-before-save)  (require 'go-eldoc)  (add-hook 'go-mode-hook 'go-eldoc-setup)  (require 'auto-complete)  (require 'go-autocomplete)  (require 'auto-complete-config)  (setq gofmt-command "goimports")#+END_SRC** C/C++[[http://www.gnu.org/software/emacs/manual/html_mono/ccmode.html]]#+BEGIN_SRC emacs-lisp  (setq c-tab-always-indent t)  (setq c-basic-offset 4)  (setq c-indent-level 4)#+END_SRCstyling[[https://www.emacswiki.org/emacs/IndentingC]]#+BEGIN_SRC emacs-lisp  (require 'cc-mode)  (c-set-offset 'substatement-open 0)  (c-set-offset 'arglist-intro '+)  (add-hook 'c-mode-common-hook '(lambda() (c-toggle-hungry-state 1)))  (define-key c-mode-base-map (kbd "RET") 'newline-and-indent)#+END_SRC** pythonWelcome to flying circus :circus_tent:.#+BEGIN_SRC emacs-lisp  (setq-default py-indent-offset 4)#+END_SRC*** [[http://tkf.github.io/emacs-jedi/][jedi]]#+BEGIN_SRC emacs-lisp  (autoload 'jedi:setup "jedi" nil t)  (add-hook 'python-mode-hook 'jedi:setup)  (setq jedi:complete-on-dot t) ; optional  ;; (setq jedi:setup-keys t) ; optional#+END_SRC*** python-info-lookshortcut "[C-h S]"#+BEGIN_SRC emacs-lisp  ;; (add-to-list 'load-path "~/.emacs.d/pydoc-info")  ;; (require 'pydoc-info)  ;; (require 'info-look)#+END_SRC*** pdb#+BEGIN_SRC emacs-lisp  ;; (setq pdb-path '/usr/lib/python2.4/pdb.py  ;; gud-pdb-command-name (symbol-name pdb-path))  ;; (defadvice pdb (before gud-query-cmdline activate) "Provide a  ;; better default command line when called interactively."  ;; (interactive (list (gud-query-cmdline pdb-path  ;; (file-name-nondirectory buffer-file-name)))))#+END_SRC*** [[https://github.com/manishmarahatta/py-exec][py execution]]ess-style executing /python/ script.#+BEGIN_SRC emacs-lisp  ;; (add-to-list 'load-path "~/.emacs.d/modules/py-exec/")  ;; (require 'py-exec)  (load "~/.emacs.d/modules/py-exec/py-exec.el")#+END_SRC** lua#+BEGIN_SRC emacs-lisp  (setq lua-indent-level 4)#+END_SRC** kotlin#+BEGIN_SRC emacs-lisp  (setq default-tab-width 4)#+END_SRC** web modes#+BEGIN_SRC emacs-lisp  ;;  (load "~/.emacs.d/config/html.cfg.el")#+END_SRC** eww/xwidgeteww "Emacs Web Wowser" is a web browser written entirely inelisp avaliable since version 24.4As much awesome it sounds you will be ridiculed if you try to showof to normal users! :stuck_out_tongue_winking_eye:As of version 25.1 *webkit* has been introduced although you haveenable it while compiling, it pretty :cool: feature toohave :sunglasses:.config is based on [[https://www.reddit.com/r/emacs/comments/4srze9/watching_youtube_inside_emacs_25/][reddit]] post.make these keys behave like normal browser#+BEGIN_SRC emacs-lisp  (add-hook 'xwidget-webkit-mode (lambda ()    (define-key xwidget-webkit-mode-map [mouse-4] 'xwidget-webkit-scroll-down)    (define-key xwidget-webkit-mode-map [mouse-5] 'xwidget-webkit-scroll-up)    (define-key xwidget-webkit-mode-map (kbd "<up>") 'xwidget-webkit-scroll-down)    (define-key xwidget-webkit-mode-map (kbd "<down>") 'xwidget-webkit-scroll-up)    (define-key xwidget-webkit-mode-map (kbd "M-w") 'xwidget-webkit-copy-selection-as-kill)    (define-key xwidget-webkit-mode-map (kbd "C-c") 'xwidget-webkit-copy-selection-as-kill)))#+END_SRCAdapt webkit according to window configuration chagne automaticallywithout this hook, every time you change your window configuration,you must press =a= to adapt webkit content to new window size.#+BEGIN_SRC emacs-lisp  (add-hook 'window-configuration-change-hook (lambda ()                 (when (equal major-mode 'xwidget-webkit-mode)                   (xwidget-webkit-adjust-size-dispatch))))#+END_SRCby default, xwidget reuses previous xwidget window, thus overridingyour current website, unless a prefix argument is supplied. Thisfunction always opens a new website in a new window#+BEGIN_SRC emacs-lisp  (defun xwidget-browse-url-no-reuse (url &optional sessoin)    (interactive (progn                   (require 'browse-url)                   (browse-url-interactive-arg "xwidget-webkit URL: ")))    (xwidget-webkit-browse-url url t))#+END_SRCmake xwidget default browser#+BEGIN_SRC emacs-lisp  ;; (setq browse-url-browser-function (lambda (url session)  ;;                    (other-window 1)  ;;                    (xwidget-browse-url-no-reuse url)))#+END_SRC** Org#+BEGIN_SRC emacs-lisp  (load "~/.emacs.d/config/org-mode.cfg.el")  (load "~/.emacs.d/config/babel.cfg.el")#+END_SRC*** Minor modeOrg-mode is addictive, why not use it as minor-modes.*outline*#+BEGIN_SRC emacs-lisp  (require 'outline)  (add-hook 'prog-mode-hook 'outline-minor-mode)  (add-hook 'compilation-mode-hook 'outline-minor-mode)#+END_SRC*outshine*#+BEGIN_SRC emacs-lisp  (require 'outshine)  (add-hook 'outline-minor-mode-hook 'outshine-hook-function)  ;; (add-hook 'outline-minor-mode-hook  ;;          '(lambda ()  ;;             (define-key org-mode-map (kbd "C-j") nil)))#+END_SRC** dockerfileGoodies for :whale: :whale: :whale:#+BEGIN_SRC emacs-lisp  (el-get 'sync 'dockerfile-mode)  (add-to-list 'auto-mode-alist '("Dockerfile" . dockerfile-mode))#+END_SRC** json#+BEGIN_SRC emacs-lisp  (setq auto-mode-alist     (cons '("\.json$" . json-mode) auto-mode-alist))#+END_SRC** markdown#+BEGIN_SRC emacs-lisp  (el-get 'sync 'markdown-mode)  ;; disable because markdown creating problem to dockerfile-mode  ;; (add-to-list 'auto-mode-alist '("\.md" . markdown-mode))#+END_SRC** yasnippet#+BEGIN_SRC emacs-lisp  (when window-system    (require 'yasnippet)    (yas-reload-all)    (add-hook 'prog-mode-hook 'yas-minor-mode-on)    (add-hook 'org-mode-hook 'yas-minor-mode-on))#+END_SRC* [[https://github.com/manishmarahatta/dot-emacs/blob/master/scripts/wordplay.el][word play]]Word play consist of collection of nify scripts.#+BEGIN_SRC emacs-lisp  (load "~/.emacs.d/scripts/wordplay.el")#+END_SRC** duplicate lines/words#+BEGIN_SRC emacs-lisp  (global-set-key (kbd "C-`") 'duplicate-current-line)  (global-set-key (kbd "C-~") 'duplicate-current-word)#+END_SRC** on point line copyonly enable for =C-<insert>=#+BEGIN_SRC emacs-lisp  (global-set-key (kbd "C-<insert>") 'kill-ring-save-current-line)#+END_SRC** sort words[[http://www.emacswiki.org/emacs/SortWords]]** popup kill ringkill :skull: ring :ring:Only enable for =Shift + <insert>=#+BEGIN_SRC emacs-lisp  (global-set-key [(shift insert)] 'repetitive-yanking)#+END_SRC* TestingThis :construction: section :construction: contain modes (plug-in)which modified to *extreme* or :bug: *buggy*. May still not be*available* in =el-get=.#+BEGIN_SRC emacs-lisp  (add-to-list 'load-path "~/.emacs.d/modules/")#+END_SRC** browser-refreshThere are stuff like [[http://www.emacswiki.org/emacs/MozRepl][moz-repl]], [[https://github.com/skeeto/skewer-mode][skewer-mode]], [[https://github.com/skeeto/impatient-mode][impatient-mode]] butnothing beats good old way with *xdotool* hail *X11* for now! :joy:#+BEGIN_SRC emacs-lisp  ;; (add-to-list 'load-path "~/.emacs.d/modules/emacs-browser-refresh/")  ;; (require 'browser-refresh)  ;; (setq browser-refresh-default-browser 'firefox)#+END_SRCabove thingi comment, lets do Makefile!#+BEGIN_EXAMPLEWINDOW=$(shell xdotool search --onlyvisible --class chromium)run:   xdotool key --window ${WINDOW} 'F5'   xdotool windowactivate ${WINDOW}#+END_EXAMPLE** auto-complete [[https://github.com/syohex/emacs-ac-emoji][emoji]]can't remember your emoji? this is the thing you need*Note*: if you are using  company mode use [[https://github.com/dunn/company-emoji][company-emoji]]requires [[https://zhm.github.io/symbola/][Symbola]] font, to be installed.#+BEGIN_SRC emacs-lisp  (add-to-list 'load-path "~/.emacs.d/modules/emacs-ac-emoji/")  (require 'ac-emoji)  (add-hook 'org-mode-hook 'auto-complete-mode)  (add-hook 'org-mode-hook 'ac-emoji-setup)  (add-hook 'markdown-mode-hook 'ac-emoji-setup)  (add-hook 'git-commit-mode-hook 'ac-emoji-setup)  (set-fontset-font     t 'symbol       (font-spec :family "Symbola") nil 'prepend)#+END_SRC** window numberingalso avalible in *el-get*.#+BEGIN_SRC emacs-lisp  (add-to-list 'load-path "~/.emacs.d/modules/window-numbering/")  (require 'window-numbering)  (window-numbering-mode)#+END_SRC** highlight indentationUsing [[https://github.com/localredhead][localreadhead]] fork of [[https://github.com/antonj/Highlight-Indentation-for-Emacs][highlight indentation]], for *web-mode*compatibility. See yasnippet issue [[https://github.com/capitaomorte/yasnippet/issues/396][#396]]other color: "#aaeeba"#+BEGIN_SRC emacs-lisp  (add-to-list 'load-path "~/.emacs.d/modules/indent/antonj/")  ;;; DID YOU GOT STUCK ABOVE? COMMENT LINE ABOVE & UNCOMMENT NEXT LINE  ;; (el-get 'sync 'highlight-indentation)  (require 'highlight-indentation)  (set-face-background 'highlight-indentation-face "olive drab")  (set-face-background 'highlight-indentation-current-column-face "#c3b3b3")  (add-hook 'prog-mode-hook 'highlight-indentation-mode)  (add-hook 'prog-mode-hook 'highlight-indentation-current-column-mode)#+END_SRC** hideshowvis mode[[http://www.emacswiki.org/emacs/download/hideshowvis.el]]#+BEGIN_SRC emacs-lisp  (autoload 'hideshowvis-enable "hideshowvis")  (autoload 'hideshowvis-minor-mode    "hideshowvis"    "Will indicate regions foldable with hideshow in the fringe."    'interactive)  (add-hook 'python-mode-hook 'hideshowvis-enable)#+END_SRC** auto-dim-buffer[[https://github.com/mina86/auto-dim-other-buffers.el]]#+BEGIN_SRC emacs-lisp  (when window-system    (add-to-list 'load-path "~/.emacs.d/modules/auto-dim-other-buffers.el")    (require 'auto-dim-other-buffers)    (add-hook 'after-init-hook (lambda ()                                 (when (fboundp 'auto-dim-other-buffers-mode)                                   (auto-dim-other-buffers-mode t)))))#+END_SRC** ansi-colorNeed to fix 265 color support.This is what I meant [[https://camo.githubusercontent.com/67e508f03a93d4e9935e38ea201dff7cc32c0afd/68747470733a2f2f7261772e6769746875622e636f6d2f72686f69742f72686f69742e6769746875622e636f6d2f6d61737465722f73637265656e73686f74732f656d6163732d323536636f6c6f722e706e67][screenshot]] was produced using [[https://github.com/bekar/vt100_colors][code]].#+BEGIN_SRC emacs-lisp  (add-to-list 'load-path "~/.emacs.d/modules/colors")  ;;; DID YOU GOT STUCK ABOVE? COMMENT LINE ABOVE  (require 'ansi-color)  (defun colorize-compilation-buffer ()    (toggle-read-only)    (ansi-color-apply-on-region (point-min) (point-max))    (toggle-read-only))  (add-hook 'compilation-filter-hook 'colorize-compilation-buffer)#+END_SRC** line number[[http://www.emacswiki.org/LineNumbers]][[http://elpa.gnu.org/packages/nlinum-1.1.el]]#+BEGIN_SRC emacs-lisp  (require 'nlinum)  (setq nlinum-delay t)  (add-hook 'find-file-hook (lambda () (nlinum-mode 1)))#+END_SRC** isend-mode#+BEGIN_SRC emacs-lisp  ;; (add-to-list 'load-path "~/.emacs.d/modules/isend-mode/")  ;; (require 'isend)#+END_SRC** LFG mode#+BEGIN_SRC emacs-lisp  ;; (setq xle-buffer-process-coding-system 'utf-8)  ;; (load-library "/opt/xle/emacs/lfg-mode")#+END_SRC** Wakka TimeWell it's a crap, requires lots of dependencies#+BEGIN_SRC emacs-lisp  ;;(global-wakatime-mode)#+END_SRC** autocomplete helm#+BEGIN_SRC emacs-lisp  ;;(require 'ac-helm)  ;; Not necessary if using ELPA package  ;;(global-set-key (kbd "C-:") 'ac-complete-with-helm)  ;;(define-key ac-complete-mode-map (kbd "C-:") 'ac-complete-with-helm)#+END_SRC** gocode#+BEGIN_SRC emacs-lisp  (add-to-list 'load-path "~/.emacs.d/modules/gocode")  (require 'go-autocomplete)  (require 'auto-complete-config)  (ac-config-default)#+END_SRC#+BEGIN_SRC emacs-lisp  (when (memq window-system '(mac ns))    (exec-path-from-shell-initialize)    (exec-path-from-shell-copy-env "GOPATH"))#+END_SRC** stock-ticker#+BEGIN_SRC emacs-lisp  ;;(add-to-list 'load-path "~/.emacs.d/modules/stock-ticker.el")  ;;(require 'stock-ticker)#+END_SRC* __meta__* References1. [[https://github.com/rhoit][@rhoit]]